Install
--------
apt-get install git


Help
------
git help
git help config
git config --help
man git-config


Configure
----------
# who gets credits for the changes and what e-mail to use
git config --global user.name "Jurgen Lamsens"
git config --global user.email "jurgen.lamsens@telenet.be"
# line ending prefs
git config --global core.autocrlf input
git config --global core.safecrlf true
# pretty command line colors
git config --global color.ui true

# result
ls -larth ~/.gitconfig

# add some interesting aliases
cat >> ~/.gitconfig << _EOF_
[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  type = cat-file -t
  dump = cat-file -p
_EOF_


New repo
---------
mkdir dir
cd dir
# adds 'local' repo in .git (stores git metadata)
git init


Terminology
------------
working directory = ...
commit = add to repository
track/stage = add to staging area
...


Work flow
----------
# create 'new' file
touch c1.txt
# result: 1 untracked/unstaged 'new' file, ready to be tracked/staged
git status

  # delete 'new' file
  rm c1.txt
  # result: nothing to commit
  git status
  # now repeat previous steps and skip this one

# track/stage 'new' file
git add c1.txt
# result: 1 tracked/staged 'new' file, ready to be committed
git status

  # untrack/unstage 'new' file
  git rm --cached c1.txt
  # result: again 1 untracked/unstaged 'new' file, ready to be tracked/staged
  git status
  # now repeat previous steps and skip this one

# commit 'new' file
git commit -m "commit1: added c1.txt"
# result: no 'new' files since last commit (working directory clean)
git status

# modify file
vi c1.txt
# result: 1 untracked/unstaged 'modified' file, ready to be tracked/staged
# git status

  # undo modification
  git checkout -- c1.txt
  # result: modification gone, again nothing to commit (working directory clean)
  git status
  # now repeat previous steps and skip this one

# track/stage 'modified' file again
git add c1.txt
# result: 1 'modified' file tracked/staged, ready to be committed
git status

  # untrack/unstage file
  # mind the difference with the previous unstage, where the file was not yet committed
  # do not use 'git rm --cached c1.txt' !!!
  git reset HEAD c1.txt
  # result: 1 'modified' file tracked/staged, ready to be committed
  # now repeat previous step and skip this one

# commit file again
git commit -m "commit2: modified c1.txt"
# result: 1 'modified' file committed, again nothing to commit (working directory clean)
git status

# history so far
git log
git log --pretty=oneline
git log --pretty=oneline --max-count=2
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'
git log --pretty=oneline --author="Jurgen Lamsens"
git log --pretty=oneline --all
git log --all --pretty=format:"%h %cd %s (%an)" --since='7 days ago'
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
git log -p -2

apt-get install gitk







# create new file
touch license.txt
# 1 modified, 1 untracked file since last commit
git status

# add multiple files to staging area
# add file by file
git add readme.txt
git add license.txt
# add both files at once
git add readme.txt license.txt
# adds all new or modified files
git add --all
# adds all txt files in current directory
git add *.txt
# new file license and modified file readme
git status

git add docs/*.txt	# add all txt files in docs directory
git add docs/		# add all files in the docs directory
git add "*.txt" 	# add all txt files in the whole project
git add . 		# add all changes to files in the current directory and below

# use past or present tence ? "Create file" or "Created file" ?
git commit -m "Added license and finished readme"





Clone a repo
-------------
# creates dir git-info
git clone git@github.com:jlamsens/git-info.git
# creates dir othername
git clone git@github.com:jlamsens/git-info.git othername


Ignore stuff
-------------
# create .gitignore

# contents:
# a comment - this is ignored
*.a       # no .a files
!lib.a    # but do track lib.a, even though you're ignoring .a files above
/TODO     # only ignore the root TODO file, not subdir/TODO
build/    # ignore all files in the build/ directory
doc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt


Various
--------
# what youâ€™ve changed but not yet staged / compare what is in your working directory with what is in your staging area
git diff
# compare your staged changes to your last commit
git diff --cached
# puts the diff of your change in the editor
git commit -v
# avoid doing 'git add file' bedore 'git commit -m "new file"'
git commit -a -m "new file"
# removing files
git rm file.txt
# remove an accidently staged file
git rm --cached file.a
# renaming a file
git mv file file.txt

mv file file.txt
git rm file
git add file.txt

# still only one commit
git commit -m 'initial commit'
git add forgotten_file
git commit --amend


Remotes
--------
# showing your remotes
git remote
git remote -v
git remote add [remote-name] git@github.com:jlamsens/try_git.git
# get data from remote projects
git fetch [remote-name]
